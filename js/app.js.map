{"version":3,"file":"app.js","sources":["../js/lib/constants.js","../js/lib/$.js","../js/init/initCookiePolicy.js","../js/init/initNav.js","../js/lib/eachNode.js","../js/init/initArticle.js","../js/app.js"],"sourcesContent":["\"use strict\";\n\nconst _window = window;\nconst _document = document;\n\nexport {\n    _window,\n    _document\n};\n","\"use strict\";\n\nimport {\n    _document\n} from \"./constants\";\n\n/**\n * jQuery-like selector\n * @param {String} query String query\n * @param {Boolean} multi If the select will match multiple elements\n * @returns {NodeList} NodeList of selcted elements\n */\nconst $ = function (query, multi) {\n    return multi ? _document.querySelectorAll(query) : _document.querySelector(query);\n};\n\nexport default $;\n","\"use strict\";\n\nimport {\n    _document\n} from \"../lib/constants\";\nimport $ from \"../lib/$\";\n\n/**\n * Checks if the cookie policy has been accepted and displays the notification if not.\n */\nconst initCookiePolicy = function () {\n    const cookieString = \"cookies=true\";\n\n    if (_document.cookie.indexOf(cookieString) === -1) {\n        const $cookienotice = $(\".cookienotice\");\n        const $cookienoticeAccept = $(\"#cookienoticeAccept\");\n\n        $cookienotice.style.display = \"block\";\n        _document.cookie = cookieString + \";expires=Fri, 31 Dec 9999 23:59:59 GMT\";\n\n        $cookienoticeAccept.addEventListener(\"click\", () => {\n            $cookienotice.style.display = \"none\";\n        }, false);\n    }\n};\n\nexport default initCookiePolicy;\n","\"use strict\";\n\nimport $ from \"../lib/$\";\n/**\n * Binds the navigation event handler\n */\nconst initNav = function () {\n    const $toggle = $(\"#navbarToggle\");\n    const $nav = $(\"#navbarMenu\");\n    let isNavOpen = false;\n\n    //Toggle menu\n    $toggle.addEventListener(\"click\", () => {\n        isNavOpen = !isNavOpen;\n\n        $toggle.classList.toggle(\"collapsed\");\n        $nav.classList.toggle(\"show\");\n\n        //Set Aria attributes\n        $toggle.setAttribute(\"aria-expanded\", isNavOpen);\n        $nav.setAttribute(\"aria-hidden\", !isNavOpen);\n    }, false);\n};\n\nexport default initNav;\n","\"use strict\";\n\n/**\n * Iterate over NodeList\n *\n * @param {NodeList} nodeList NodeList of elements\n * @param {Function} fn   Function to run\n */\nconst eachNode = function (nodeList, fn) {\n    Array.from(nodeList).forEach(fn);\n};\n\nexport default eachNode;\n","\"use strict\";\n\nimport {\n    _window,\n    _document\n} from \"../lib/constants\";\nimport $ from \"../lib/$\";\nimport eachNode from \"../lib/eachNode\";\n\n/**\n * Inits article-specific html changes\n */\nconst initArticle = function () {\n    const $pre = $(\"article pre\", true);\n    const $tables = $(\"article table\", true);\n\n    //Adjust Table classes\n    eachNode($tables, $e => {\n        const $clone = $e.cloneNode(true); //Deep-clones old table\n        const $tableVirtual = _document.createElement(\"div\"); //Manipulate a virtual node instead of the actual one to improve performance\n\n        $clone.classList.add(\"table\", \"table-bordered\", \"table-hover\");\n        $tableVirtual.classList.add(\"table-responsive\");\n        $tableVirtual.appendChild($clone);\n\n        $e.replaceWith($tableVirtual);\n    });\n\n    //Highlight Code Snippets\n    eachNode($pre, $e => {\n        _window.hljs.highlightBlock($e);\n    });\n};\n\nexport default initArticle;\n","\"use strict\";\n\nimport initCookiePolicy from \"./init/initCookiePolicy\";\nimport initNav from \"./init/initNav\";\nimport initArticle from \"./init/initArticle\";\n\n\n/**\n * Inits the page with optional page-dependent function\n *\n * @param {String} pageType name of the grav template\n */\nconst init = function (pageType) {\n    initCookiePolicy();\n    initNav();\n\n    if (pageType === \"item\") {\n        initArticle();\n    }\n};\n\nconst app = {\n    init\n};\n\nexport default app;\n"],"names":["_window","window","_document","document","$","query","multi","querySelectorAll","querySelector","initCookiePolicy","cookie","indexOf","$cookienotice","$cookienoticeAccept","style","display","cookieString","addEventListener","initNav","$toggle","$nav","isNavOpen","classList","toggle","setAttribute","eachNode","nodeList","fn","from","forEach","initArticle","$pre","$tables","$clone","$e","cloneNode","$tableVirtual","createElement","add","appendChild","replaceWith","hljs","highlightBlock","pageType"],"mappings":"oCAEA,IAAMA,GAAUC,OACVC,EAAYC,SCSZC,EAAI,SAAUC,EAAOC,SAChBA,GAAQJ,EAAUK,iBAAiBF,GAASH,EAAUM,cAAcH,ICHzEI,EAAmB,eAG2B,IAA5CP,EAAUQ,OAAOC,QAFA,gBAE8B,IACzCC,GAAgBR,EAAE,iBAClBS,EAAsBT,EAAE,yBAEhBU,MAAMC,QAAU,UACpBL,OAASM,uDAECC,iBAAiB,QAAS,aAC5BH,MAAMC,QAAU,SAC/B,KChBLG,EAAU,cACNC,GAAUf,EAAE,iBACZgB,EAAOhB,EAAE,eACXiB,GAAY,IAGRJ,iBAAiB,QAAS,cACjBI,IAELC,UAAUC,OAAO,eACpBD,UAAUC,OAAO,UAGdC,aAAa,gBAAiBH,KACjCG,aAAa,eAAgBH,KACnC,ICbDI,EAAW,SAAUC,EAAUC,SAC3BC,KAAKF,GAAUG,QAAQF,ICG3BG,EAAc,cACVC,GAAO3B,EAAE,eAAe,GACxB4B,EAAU5B,EAAE,iBAAiB,KAG1B4B,EAAS,eACRC,GAASC,EAAGC,WAAU,GACtBC,EAAgBlC,EAAUmC,cAAc,SAEvCf,UAAUgB,IAAI,QAAS,iBAAkB,iBAClChB,UAAUgB,IAAI,sBACdC,YAAYN,KAEvBO,YAAYJ,OAIVL,EAAM,cACHU,KAAKC,eAAeR,kBClBvB,SAAUS,WAIF,SAAbA","preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjpudWxsLCJzb3VyY2VzIjpbIi9tbnQvYy94YW1wcC9odGRvY3Mvd29ya3NwYWNlL2YtcmlsbGluZy5jb20zL3VzZXIvdGhlbWVzL2ZyaWxsaW5nMy9zcmMvanMvbGliL2NvbnN0YW50cy5qcyIsIi9tbnQvYy94YW1wcC9odGRvY3Mvd29ya3NwYWNlL2YtcmlsbGluZy5jb20zL3VzZXIvdGhlbWVzL2ZyaWxsaW5nMy9zcmMvanMvbGliLyQuanMiLCIvbW50L2MveGFtcHAvaHRkb2NzL3dvcmtzcGFjZS9mLXJpbGxpbmcuY29tMy91c2VyL3RoZW1lcy9mcmlsbGluZzMvc3JjL2pzL2luaXQvaW5pdENvb2tpZVBvbGljeS5qcyIsIi9tbnQvYy94YW1wcC9odGRvY3Mvd29ya3NwYWNlL2YtcmlsbGluZy5jb20zL3VzZXIvdGhlbWVzL2ZyaWxsaW5nMy9zcmMvanMvaW5pdC9pbml0TmF2LmpzIiwiL21udC9jL3hhbXBwL2h0ZG9jcy93b3Jrc3BhY2UvZi1yaWxsaW5nLmNvbTMvdXNlci90aGVtZXMvZnJpbGxpbmczL3NyYy9qcy9saWIvZWFjaE5vZGUuanMiLCIvbW50L2MveGFtcHAvaHRkb2NzL3dvcmtzcGFjZS9mLXJpbGxpbmcuY29tMy91c2VyL3RoZW1lcy9mcmlsbGluZzMvc3JjL2pzL2luaXQvaW5pdEFydGljbGUuanMiLCIvbW50L2MveGFtcHAvaHRkb2NzL3dvcmtzcGFjZS9mLXJpbGxpbmcuY29tMy91c2VyL3RoZW1lcy9mcmlsbGluZzMvc3JjL2pzL2FwcC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuY29uc3QgX3dpbmRvdyA9IHdpbmRvdztcbmNvbnN0IF9kb2N1bWVudCA9IGRvY3VtZW50O1xuXG5leHBvcnQge1xuICAgIF93aW5kb3csXG4gICAgX2RvY3VtZW50XG59O1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbmltcG9ydCB7XG4gICAgX2RvY3VtZW50XG59IGZyb20gXCIuL2NvbnN0YW50c1wiO1xuXG4vKipcbiAqIGpRdWVyeS1saWtlIHNlbGVjdG9yXG4gKiBAcGFyYW0ge1N0cmluZ30gcXVlcnkgU3RyaW5nIHF1ZXJ5XG4gKiBAcGFyYW0ge0Jvb2xlYW59IG11bHRpIElmIHRoZSBzZWxlY3Qgd2lsbCBtYXRjaCBtdWx0aXBsZSBlbGVtZW50c1xuICogQHJldHVybnMge05vZGVMaXN0fSBOb2RlTGlzdCBvZiBzZWxjdGVkIGVsZW1lbnRzXG4gKi9cbmNvbnN0ICQgPSBmdW5jdGlvbiAocXVlcnksIG11bHRpKSB7XG4gICAgcmV0dXJuIG11bHRpID8gX2RvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwocXVlcnkpIDogX2RvY3VtZW50LnF1ZXJ5U2VsZWN0b3IocXVlcnkpO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgJDtcbiIsIlwidXNlIHN0cmljdFwiO1xuXG5pbXBvcnQge1xuICAgIF9kb2N1bWVudFxufSBmcm9tIFwiLi4vbGliL2NvbnN0YW50c1wiO1xuaW1wb3J0ICQgZnJvbSBcIi4uL2xpYi8kXCI7XG5cbi8qKlxuICogQ2hlY2tzIGlmIHRoZSBjb29raWUgcG9saWN5IGhhcyBiZWVuIGFjY2VwdGVkIGFuZCBkaXNwbGF5cyB0aGUgbm90aWZpY2F0aW9uIGlmIG5vdC5cbiAqL1xuY29uc3QgaW5pdENvb2tpZVBvbGljeSA9IGZ1bmN0aW9uICgpIHtcbiAgICBjb25zdCBjb29raWVTdHJpbmcgPSBcImNvb2tpZXM9dHJ1ZVwiO1xuXG4gICAgaWYgKF9kb2N1bWVudC5jb29raWUuaW5kZXhPZihjb29raWVTdHJpbmcpID09PSAtMSkge1xuICAgICAgICBjb25zdCAkY29va2llbm90aWNlID0gJChcIi5jb29raWVub3RpY2VcIik7XG4gICAgICAgIGNvbnN0ICRjb29raWVub3RpY2VBY2NlcHQgPSAkKFwiI2Nvb2tpZW5vdGljZUFjY2VwdFwiKTtcblxuICAgICAgICAkY29va2llbm90aWNlLnN0eWxlLmRpc3BsYXkgPSBcImJsb2NrXCI7XG4gICAgICAgIF9kb2N1bWVudC5jb29raWUgPSBjb29raWVTdHJpbmcgKyBcIjtleHBpcmVzPUZyaSwgMzEgRGVjIDk5OTkgMjM6NTk6NTkgR01UXCI7XG5cbiAgICAgICAgJGNvb2tpZW5vdGljZUFjY2VwdC5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKCkgPT4ge1xuICAgICAgICAgICAgJGNvb2tpZW5vdGljZS5zdHlsZS5kaXNwbGF5ID0gXCJub25lXCI7XG4gICAgICAgIH0sIGZhbHNlKTtcbiAgICB9XG59O1xuXG5leHBvcnQgZGVmYXVsdCBpbml0Q29va2llUG9saWN5O1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbmltcG9ydCAkIGZyb20gXCIuLi9saWIvJFwiO1xuLyoqXG4gKiBCaW5kcyB0aGUgbmF2aWdhdGlvbiBldmVudCBoYW5kbGVyXG4gKi9cbmNvbnN0IGluaXROYXYgPSBmdW5jdGlvbiAoKSB7XG4gICAgY29uc3QgJHRvZ2dsZSA9ICQoXCIjbmF2YmFyVG9nZ2xlXCIpO1xuICAgIGNvbnN0ICRuYXYgPSAkKFwiI25hdmJhck1lbnVcIik7XG4gICAgbGV0IGlzTmF2T3BlbiA9IGZhbHNlO1xuXG4gICAgLy9Ub2dnbGUgbWVudVxuICAgICR0b2dnbGUuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsICgpID0+IHtcbiAgICAgICAgaXNOYXZPcGVuID0gIWlzTmF2T3BlbjtcblxuICAgICAgICAkdG9nZ2xlLmNsYXNzTGlzdC50b2dnbGUoXCJjb2xsYXBzZWRcIik7XG4gICAgICAgICRuYXYuY2xhc3NMaXN0LnRvZ2dsZShcInNob3dcIik7XG5cbiAgICAgICAgLy9TZXQgQXJpYSBhdHRyaWJ1dGVzXG4gICAgICAgICR0b2dnbGUuc2V0QXR0cmlidXRlKFwiYXJpYS1leHBhbmRlZFwiLCBpc05hdk9wZW4pO1xuICAgICAgICAkbmF2LnNldEF0dHJpYnV0ZShcImFyaWEtaGlkZGVuXCIsICFpc05hdk9wZW4pO1xuICAgIH0sIGZhbHNlKTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IGluaXROYXY7XG4iLCJcInVzZSBzdHJpY3RcIjtcblxuLyoqXG4gKiBJdGVyYXRlIG92ZXIgTm9kZUxpc3RcbiAqXG4gKiBAcGFyYW0ge05vZGVMaXN0fSBub2RlTGlzdCBOb2RlTGlzdCBvZiBlbGVtZW50c1xuICogQHBhcmFtIHtGdW5jdGlvbn0gZm4gICBGdW5jdGlvbiB0byBydW5cbiAqL1xuY29uc3QgZWFjaE5vZGUgPSBmdW5jdGlvbiAobm9kZUxpc3QsIGZuKSB7XG4gICAgQXJyYXkuZnJvbShub2RlTGlzdCkuZm9yRWFjaChmbik7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBlYWNoTm9kZTtcbiIsIlwidXNlIHN0cmljdFwiO1xuXG5pbXBvcnQge1xuICAgIF93aW5kb3csXG4gICAgX2RvY3VtZW50XG59IGZyb20gXCIuLi9saWIvY29uc3RhbnRzXCI7XG5pbXBvcnQgJCBmcm9tIFwiLi4vbGliLyRcIjtcbmltcG9ydCBlYWNoTm9kZSBmcm9tIFwiLi4vbGliL2VhY2hOb2RlXCI7XG5cbi8qKlxuICogSW5pdHMgYXJ0aWNsZS1zcGVjaWZpYyBodG1sIGNoYW5nZXNcbiAqL1xuY29uc3QgaW5pdEFydGljbGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgY29uc3QgJHByZSA9ICQoXCJhcnRpY2xlIHByZVwiLCB0cnVlKTtcbiAgICBjb25zdCAkdGFibGVzID0gJChcImFydGljbGUgdGFibGVcIiwgdHJ1ZSk7XG5cbiAgICAvL0FkanVzdCBUYWJsZSBjbGFzc2VzXG4gICAgZWFjaE5vZGUoJHRhYmxlcywgJGUgPT4ge1xuICAgICAgICBjb25zdCAkY2xvbmUgPSAkZS5jbG9uZU5vZGUodHJ1ZSk7IC8vRGVlcC1jbG9uZXMgb2xkIHRhYmxlXG4gICAgICAgIGNvbnN0ICR0YWJsZVZpcnR1YWwgPSBfZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTsgLy9NYW5pcHVsYXRlIGEgdmlydHVhbCBub2RlIGluc3RlYWQgb2YgdGhlIGFjdHVhbCBvbmUgdG8gaW1wcm92ZSBwZXJmb3JtYW5jZVxuXG4gICAgICAgICRjbG9uZS5jbGFzc0xpc3QuYWRkKFwidGFibGVcIiwgXCJ0YWJsZS1ib3JkZXJlZFwiLCBcInRhYmxlLWhvdmVyXCIpO1xuICAgICAgICAkdGFibGVWaXJ0dWFsLmNsYXNzTGlzdC5hZGQoXCJ0YWJsZS1yZXNwb25zaXZlXCIpO1xuICAgICAgICAkdGFibGVWaXJ0dWFsLmFwcGVuZENoaWxkKCRjbG9uZSk7XG5cbiAgICAgICAgJGUucmVwbGFjZVdpdGgoJHRhYmxlVmlydHVhbCk7XG4gICAgfSk7XG5cbiAgICAvL0hpZ2hsaWdodCBDb2RlIFNuaXBwZXRzXG4gICAgZWFjaE5vZGUoJHByZSwgJGUgPT4ge1xuICAgICAgICBfd2luZG93LmhsanMuaGlnaGxpZ2h0QmxvY2soJGUpO1xuICAgIH0pO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgaW5pdEFydGljbGU7XG4iLCJcInVzZSBzdHJpY3RcIjtcblxuaW1wb3J0IGluaXRDb29raWVQb2xpY3kgZnJvbSBcIi4vaW5pdC9pbml0Q29va2llUG9saWN5XCI7XG5pbXBvcnQgaW5pdE5hdiBmcm9tIFwiLi9pbml0L2luaXROYXZcIjtcbmltcG9ydCBpbml0QXJ0aWNsZSBmcm9tIFwiLi9pbml0L2luaXRBcnRpY2xlXCI7XG5cblxuLyoqXG4gKiBJbml0cyB0aGUgcGFnZSB3aXRoIG9wdGlvbmFsIHBhZ2UtZGVwZW5kZW50IGZ1bmN0aW9uXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IHBhZ2VUeXBlIG5hbWUgb2YgdGhlIGdyYXYgdGVtcGxhdGVcbiAqL1xuY29uc3QgaW5pdCA9IGZ1bmN0aW9uIChwYWdlVHlwZSkge1xuICAgIGluaXRDb29raWVQb2xpY3koKTtcbiAgICBpbml0TmF2KCk7XG5cbiAgICBpZiAocGFnZVR5cGUgPT09IFwiaXRlbVwiKSB7XG4gICAgICAgIGluaXRBcnRpY2xlKCk7XG4gICAgfVxufTtcblxuY29uc3QgYXBwID0ge1xuICAgIGluaXRcbn07XG5cbmV4cG9ydCBkZWZhdWx0IGFwcDtcbiJdLCJuYW1lcyI6WyJfd2luZG93Iiwid2luZG93IiwiX2RvY3VtZW50IiwiZG9jdW1lbnQiLCIkIiwicXVlcnkiLCJtdWx0aSIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJxdWVyeVNlbGVjdG9yIiwiaW5pdENvb2tpZVBvbGljeSIsImNvb2tpZSIsImluZGV4T2YiLCIkY29va2llbm90aWNlIiwiJGNvb2tpZW5vdGljZUFjY2VwdCIsInN0eWxlIiwiZGlzcGxheSIsImNvb2tpZVN0cmluZyIsImFkZEV2ZW50TGlzdGVuZXIiLCJpbml0TmF2IiwiJHRvZ2dsZSIsIiRuYXYiLCJpc05hdk9wZW4iLCJjbGFzc0xpc3QiLCJ0b2dnbGUiLCJzZXRBdHRyaWJ1dGUiLCJlYWNoTm9kZSIsIm5vZGVMaXN0IiwiZm4iLCJmcm9tIiwiZm9yRWFjaCIsImluaXRBcnRpY2xlIiwiJHByZSIsIiR0YWJsZXMiLCIkY2xvbmUiLCIkZSIsImNsb25lTm9kZSIsIiR0YWJsZVZpcnR1YWwiLCJjcmVhdGVFbGVtZW50IiwiYWRkIiwiYXBwZW5kQ2hpbGQiLCJyZXBsYWNlV2l0aCIsImhsanMiLCJoaWdobGlnaHRCbG9jayIsInBhZ2VUeXBlIl0sIm1hcHBpbmdzIjoib0NBRUEsSUFBTUEsR0FBVUMsT0FDVkMsRUFBWUMsU0NTWkMsRUFBSSxTQUFVQyxFQUFPQyxTQUNoQkEsR0FBUUosRUFBVUssaUJBQWlCRixHQUFTSCxFQUFVTSxjQUFjSCxJQ0h6RUksRUFBbUIsZUFHMkIsSUFBNUNQLEVBQVVRLE9BQU9DLFFBRkEsZ0JBRThCLElBQ3pDQyxHQUFnQlIsRUFBRSxpQkFDbEJTLEVBQXNCVCxFQUFFLHlCQUVoQlUsTUFBTUMsUUFBVSxVQUNwQkwsT0FBU00sdURBRUNDLGlCQUFpQixRQUFTLGFBQzVCSCxNQUFNQyxRQUFVLFNBQy9CLEtDaEJMRyxFQUFVLGNBQ05DLEdBQVVmLEVBQUUsaUJBQ1pnQixFQUFPaEIsRUFBRSxlQUNYaUIsR0FBWSxJQUdSSixpQkFBaUIsUUFBUyxjQUNqQkksSUFFTEMsVUFBVUMsT0FBTyxlQUNwQkQsVUFBVUMsT0FBTyxVQUdkQyxhQUFhLGdCQUFpQkgsS0FDakNHLGFBQWEsZUFBZ0JILEtBQ25DLElDYkRJLEVBQVcsU0FBVUMsRUFBVUMsU0FDM0JDLEtBQUtGLEdBQVVHLFFBQVFGLElDRzNCRyxFQUFjLGNBQ1ZDLEdBQU8zQixFQUFFLGVBQWUsR0FDeEI0QixFQUFVNUIsRUFBRSxpQkFBaUIsS0FHMUI0QixFQUFTLGVBQ1JDLEdBQVNDLEVBQUdDLFdBQVUsR0FDdEJDLEVBQWdCbEMsRUFBVW1DLGNBQWMsU0FFdkNmLFVBQVVnQixJQUFJLFFBQVMsaUJBQWtCLGlCQUNsQ2hCLFVBQVVnQixJQUFJLHNCQUNkQyxZQUFZTixLQUV2Qk8sWUFBWUosT0FJVkwsRUFBTSxjQUNIVSxLQUFLQyxlQUFlUixrQkNsQnZCLFNBQVVTLFdBSUYsU0FBYkEifQ=="}