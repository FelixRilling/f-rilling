{"version":3,"file":"app.js","sources":["lib/constants.js","lib/$.js","init/initCookiePolicy.js","init/initNav.js","lib/eachNode.js","init/initArticle.js","app.js"],"sourcesContent":["\"use strict\";\n\nconst _window = window;\nconst _document = document;\n\nexport {\n    _window,\n    _document\n};\n","\"use strict\";\n\nimport {\n    _document\n} from \"./constants\";\n\n/**\n * jQuery-like selector\n * @param {String} query String query\n * @param {Boolean} multi If the select will match multiple elements\n * @returns {NodeList} NodeList of selcted elements\n */\nconst $ = function (query, multi) {\n    return multi ? _document.querySelectorAll(query) : _document.querySelector(query);\n};\n\nexport default $;\n","\"use strict\";\n\nimport {\n    _document\n} from \"../lib/constants\";\nimport $ from \"../lib/$\";\n\n/**\n * Checks if the cookie policy has been accepted and displays the notification if not.\n */\nconst initCookiePolicy = function () {\n    const cookieString = \"cookies=true\";\n\n    if (_document.cookie.indexOf(cookieString) === -1) {\n        const $cookienotice = $(\".cookienotice\");\n        const $cookienoticeAccept = $(\"#cookienoticeAccept\");\n\n        $cookienotice.style.display = \"block\";\n        _document.cookie = cookieString + \";expires=Fri, 31 Dec 9999 23:59:59 GMT\";\n\n        $cookienoticeAccept.addEventListener(\"click\", () => {\n            $cookienotice.style.display = \"none\";\n        }, false);\n    }\n};\n\nexport default initCookiePolicy;\n","\"use strict\";\n\nimport $ from \"../lib/$\";\n/**\n * Binds the navigation event handler\n */\nconst initNav = function () {\n    const $toggle = $(\"#navbarToggle\");\n    const $nav = $(\"#navbarMenu\");\n    let isNavOpen = false;\n\n    //Toggle menu\n    $toggle.addEventListener(\"click\", () => {\n        isNavOpen = !isNavOpen;\n\n        $toggle.classList.toggle(\"collapsed\");\n        $nav.classList.toggle(\"show\");\n\n        //Set Aria attributes\n        $toggle.setAttribute(\"aria-expanded\", isNavOpen);\n        $nav.setAttribute(\"aria-hidden\", !isNavOpen);\n    }, false);\n};\n\nexport default initNav;\n","\"use strict\";\n\n/**\n * Iterate over NodeList\n *\n * @param {NodeList} nodeList NodeList of elements\n * @param {Function} fn   Function to run\n */\nconst eachNode = function (nodeList, fn) {\n    Array.from(nodeList).forEach(fn);\n};\n\nexport default eachNode;\n","\"use strict\";\n\nimport {\n    _window,\n    _document\n} from \"../lib/constants\";\nimport $ from \"../lib/$\";\nimport eachNode from \"../lib/eachNode\";\n\n/**\n * Inits article-specific html changes\n */\nconst initArticle = function () {\n    const $pre = $(\"article pre\", true);\n    const $tables = $(\"article table\", true);\n\n    //Adjust Table classes\n    eachNode($tables, $e => {\n        const $clone = $e.cloneNode(true); //Deep-clones old table\n        const $tableVirtual = _document.createElement(\"div\"); //Manipulate a virtual node instead of the actual one to improve performance\n\n        $clone.classList.add(\"table\", \"table-bordered\", \"table-hover\");\n        $tableVirtual.classList.add(\"table-responsive\");\n        $tableVirtual.appendChild($clone);\n\n        $e.replaceWith($tableVirtual);\n    });\n\n    //Highlight Code Snippets\n    eachNode($pre, $e => {\n        _window.hljs.highlightBlock($e);\n    });\n};\n\nexport default initArticle;\n","\"use strict\";\n\nimport initCookiePolicy from \"./init/initCookiePolicy\";\nimport initNav from \"./init/initNav\";\nimport initArticle from \"./init/initArticle\";\n\n\n/**\n * Inits the page with optional page-dependent function\n *\n * @param {String} pageType name of the grav template\n */\nconst init = function (pageType) {\n    initCookiePolicy();\n    initNav();\n\n    if (pageType === \"item\") {\n        initArticle();\n    }\n};\n\nconst app = {\n    init\n};\n\nexport default app;\n"],"names":["_window","window","_document","document","$","query","multi","querySelectorAll","querySelector","initCookiePolicy","cookie","indexOf","$cookienotice","$cookienoticeAccept","style","display","cookieString","addEventListener","initNav","$toggle","$nav","isNavOpen","classList","toggle","setAttribute","eachNode","nodeList","fn","from","forEach","initArticle","$pre","$tables","$clone","$e","cloneNode","$tableVirtual","createElement","add","appendChild","replaceWith","hljs","highlightBlock","pageType"],"mappings":"oCAEA,IAAMA,GAAUC,OACVC,EAAYC,SCSZC,EAAI,SAAUC,EAAOC,SAChBA,GAAQJ,EAAUK,iBAAiBF,GAASH,EAAUM,cAAcH,ICHzEI,EAAmB,eAG2B,IAA5CP,EAAUQ,OAAOC,QAFA,gBAE8B,IACzCC,GAAgBR,EAAE,iBAClBS,EAAsBT,EAAE,yBAEhBU,MAAMC,QAAU,UACpBL,OAASM,uDAECC,iBAAiB,QAAS,aAC5BH,MAAMC,QAAU,SAC/B,KChBLG,EAAU,cACNC,GAAUf,EAAE,iBACZgB,EAAOhB,EAAE,eACXiB,GAAY,IAGRJ,iBAAiB,QAAS,cACjBI,IAELC,UAAUC,OAAO,eACpBD,UAAUC,OAAO,UAGdC,aAAa,gBAAiBH,KACjCG,aAAa,eAAgBH,KACnC,ICbDI,EAAW,SAAUC,EAAUC,SAC3BC,KAAKF,GAAUG,QAAQF,ICG3BG,EAAc,cACVC,GAAO3B,EAAE,eAAe,GACxB4B,EAAU5B,EAAE,iBAAiB,KAG1B4B,EAAS,eACRC,GAASC,EAAGC,WAAU,GACtBC,EAAgBlC,EAAUmC,cAAc,SAEvCf,UAAUgB,IAAI,QAAS,iBAAkB,iBAClChB,UAAUgB,IAAI,sBACdC,YAAYN,KAEvBO,YAAYJ,OAIVL,EAAM,cACHU,KAAKC,eAAeR,kBClBvB,SAAUS,WAIF,SAAbA","preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjpudWxsLCJzb3VyY2VzIjpbIkM6L3hhbXBwL2h0ZG9jcy93b3Jrc3BhY2UvZi1yaWxsaW5nLmNvbTMvdXNlci90aGVtZXMvZnJpbGxpbmczL3NyYy9qcy9saWIvY29uc3RhbnRzLmpzIiwiQzoveGFtcHAvaHRkb2NzL3dvcmtzcGFjZS9mLXJpbGxpbmcuY29tMy91c2VyL3RoZW1lcy9mcmlsbGluZzMvc3JjL2pzL2xpYi8kLmpzIiwiQzoveGFtcHAvaHRkb2NzL3dvcmtzcGFjZS9mLXJpbGxpbmcuY29tMy91c2VyL3RoZW1lcy9mcmlsbGluZzMvc3JjL2pzL2luaXQvaW5pdENvb2tpZVBvbGljeS5qcyIsIkM6L3hhbXBwL2h0ZG9jcy93b3Jrc3BhY2UvZi1yaWxsaW5nLmNvbTMvdXNlci90aGVtZXMvZnJpbGxpbmczL3NyYy9qcy9pbml0L2luaXROYXYuanMiLCJDOi94YW1wcC9odGRvY3Mvd29ya3NwYWNlL2YtcmlsbGluZy5jb20zL3VzZXIvdGhlbWVzL2ZyaWxsaW5nMy9zcmMvanMvbGliL2VhY2hOb2RlLmpzIiwiQzoveGFtcHAvaHRkb2NzL3dvcmtzcGFjZS9mLXJpbGxpbmcuY29tMy91c2VyL3RoZW1lcy9mcmlsbGluZzMvc3JjL2pzL2luaXQvaW5pdEFydGljbGUuanMiLCJDOi94YW1wcC9odGRvY3Mvd29ya3NwYWNlL2YtcmlsbGluZy5jb20zL3VzZXIvdGhlbWVzL2ZyaWxsaW5nMy9zcmMvanMvYXBwLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5jb25zdCBfd2luZG93ID0gd2luZG93O1xuY29uc3QgX2RvY3VtZW50ID0gZG9jdW1lbnQ7XG5cbmV4cG9ydCB7XG4gICAgX3dpbmRvdyxcbiAgICBfZG9jdW1lbnRcbn07XG4iLCJcInVzZSBzdHJpY3RcIjtcblxuaW1wb3J0IHtcbiAgICBfZG9jdW1lbnRcbn0gZnJvbSBcIi4vY29uc3RhbnRzXCI7XG5cbi8qKlxuICogalF1ZXJ5LWxpa2Ugc2VsZWN0b3JcbiAqIEBwYXJhbSB7U3RyaW5nfSBxdWVyeSBTdHJpbmcgcXVlcnlcbiAqIEBwYXJhbSB7Qm9vbGVhbn0gbXVsdGkgSWYgdGhlIHNlbGVjdCB3aWxsIG1hdGNoIG11bHRpcGxlIGVsZW1lbnRzXG4gKiBAcmV0dXJucyB7Tm9kZUxpc3R9IE5vZGVMaXN0IG9mIHNlbGN0ZWQgZWxlbWVudHNcbiAqL1xuY29uc3QgJCA9IGZ1bmN0aW9uIChxdWVyeSwgbXVsdGkpIHtcbiAgICByZXR1cm4gbXVsdGkgPyBfZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChxdWVyeSkgOiBfZG9jdW1lbnQucXVlcnlTZWxlY3RvcihxdWVyeSk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCAkO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbmltcG9ydCB7XG4gICAgX2RvY3VtZW50XG59IGZyb20gXCIuLi9saWIvY29uc3RhbnRzXCI7XG5pbXBvcnQgJCBmcm9tIFwiLi4vbGliLyRcIjtcblxuLyoqXG4gKiBDaGVja3MgaWYgdGhlIGNvb2tpZSBwb2xpY3kgaGFzIGJlZW4gYWNjZXB0ZWQgYW5kIGRpc3BsYXlzIHRoZSBub3RpZmljYXRpb24gaWYgbm90LlxuICovXG5jb25zdCBpbml0Q29va2llUG9saWN5ID0gZnVuY3Rpb24gKCkge1xuICAgIGNvbnN0IGNvb2tpZVN0cmluZyA9IFwiY29va2llcz10cnVlXCI7XG5cbiAgICBpZiAoX2RvY3VtZW50LmNvb2tpZS5pbmRleE9mKGNvb2tpZVN0cmluZykgPT09IC0xKSB7XG4gICAgICAgIGNvbnN0ICRjb29raWVub3RpY2UgPSAkKFwiLmNvb2tpZW5vdGljZVwiKTtcbiAgICAgICAgY29uc3QgJGNvb2tpZW5vdGljZUFjY2VwdCA9ICQoXCIjY29va2llbm90aWNlQWNjZXB0XCIpO1xuXG4gICAgICAgICRjb29raWVub3RpY2Uuc3R5bGUuZGlzcGxheSA9IFwiYmxvY2tcIjtcbiAgICAgICAgX2RvY3VtZW50LmNvb2tpZSA9IGNvb2tpZVN0cmluZyArIFwiO2V4cGlyZXM9RnJpLCAzMSBEZWMgOTk5OSAyMzo1OTo1OSBHTVRcIjtcblxuICAgICAgICAkY29va2llbm90aWNlQWNjZXB0LmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoKSA9PiB7XG4gICAgICAgICAgICAkY29va2llbm90aWNlLnN0eWxlLmRpc3BsYXkgPSBcIm5vbmVcIjtcbiAgICAgICAgfSwgZmFsc2UpO1xuICAgIH1cbn07XG5cbmV4cG9ydCBkZWZhdWx0IGluaXRDb29raWVQb2xpY3k7XG4iLCJcInVzZSBzdHJpY3RcIjtcblxuaW1wb3J0ICQgZnJvbSBcIi4uL2xpYi8kXCI7XG4vKipcbiAqIEJpbmRzIHRoZSBuYXZpZ2F0aW9uIGV2ZW50IGhhbmRsZXJcbiAqL1xuY29uc3QgaW5pdE5hdiA9IGZ1bmN0aW9uICgpIHtcbiAgICBjb25zdCAkdG9nZ2xlID0gJChcIiNuYXZiYXJUb2dnbGVcIik7XG4gICAgY29uc3QgJG5hdiA9ICQoXCIjbmF2YmFyTWVudVwiKTtcbiAgICBsZXQgaXNOYXZPcGVuID0gZmFsc2U7XG5cbiAgICAvL1RvZ2dsZSBtZW51XG4gICAgJHRvZ2dsZS5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKCkgPT4ge1xuICAgICAgICBpc05hdk9wZW4gPSAhaXNOYXZPcGVuO1xuXG4gICAgICAgICR0b2dnbGUuY2xhc3NMaXN0LnRvZ2dsZShcImNvbGxhcHNlZFwiKTtcbiAgICAgICAgJG5hdi5jbGFzc0xpc3QudG9nZ2xlKFwic2hvd1wiKTtcblxuICAgICAgICAvL1NldCBBcmlhIGF0dHJpYnV0ZXNcbiAgICAgICAgJHRvZ2dsZS5zZXRBdHRyaWJ1dGUoXCJhcmlhLWV4cGFuZGVkXCIsIGlzTmF2T3Blbik7XG4gICAgICAgICRuYXYuc2V0QXR0cmlidXRlKFwiYXJpYS1oaWRkZW5cIiwgIWlzTmF2T3Blbik7XG4gICAgfSwgZmFsc2UpO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgaW5pdE5hdjtcbiIsIlwidXNlIHN0cmljdFwiO1xuXG4vKipcbiAqIEl0ZXJhdGUgb3ZlciBOb2RlTGlzdFxuICpcbiAqIEBwYXJhbSB7Tm9kZUxpc3R9IG5vZGVMaXN0IE5vZGVMaXN0IG9mIGVsZW1lbnRzXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmbiAgIEZ1bmN0aW9uIHRvIHJ1blxuICovXG5jb25zdCBlYWNoTm9kZSA9IGZ1bmN0aW9uIChub2RlTGlzdCwgZm4pIHtcbiAgICBBcnJheS5mcm9tKG5vZGVMaXN0KS5mb3JFYWNoKGZuKTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IGVhY2hOb2RlO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbmltcG9ydCB7XG4gICAgX3dpbmRvdyxcbiAgICBfZG9jdW1lbnRcbn0gZnJvbSBcIi4uL2xpYi9jb25zdGFudHNcIjtcbmltcG9ydCAkIGZyb20gXCIuLi9saWIvJFwiO1xuaW1wb3J0IGVhY2hOb2RlIGZyb20gXCIuLi9saWIvZWFjaE5vZGVcIjtcblxuLyoqXG4gKiBJbml0cyBhcnRpY2xlLXNwZWNpZmljIGh0bWwgY2hhbmdlc1xuICovXG5jb25zdCBpbml0QXJ0aWNsZSA9IGZ1bmN0aW9uICgpIHtcbiAgICBjb25zdCAkcHJlID0gJChcImFydGljbGUgcHJlXCIsIHRydWUpO1xuICAgIGNvbnN0ICR0YWJsZXMgPSAkKFwiYXJ0aWNsZSB0YWJsZVwiLCB0cnVlKTtcblxuICAgIC8vQWRqdXN0IFRhYmxlIGNsYXNzZXNcbiAgICBlYWNoTm9kZSgkdGFibGVzLCAkZSA9PiB7XG4gICAgICAgIGNvbnN0ICRjbG9uZSA9ICRlLmNsb25lTm9kZSh0cnVlKTsgLy9EZWVwLWNsb25lcyBvbGQgdGFibGVcbiAgICAgICAgY29uc3QgJHRhYmxlVmlydHVhbCA9IF9kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpOyAvL01hbmlwdWxhdGUgYSB2aXJ0dWFsIG5vZGUgaW5zdGVhZCBvZiB0aGUgYWN0dWFsIG9uZSB0byBpbXByb3ZlIHBlcmZvcm1hbmNlXG5cbiAgICAgICAgJGNsb25lLmNsYXNzTGlzdC5hZGQoXCJ0YWJsZVwiLCBcInRhYmxlLWJvcmRlcmVkXCIsIFwidGFibGUtaG92ZXJcIik7XG4gICAgICAgICR0YWJsZVZpcnR1YWwuY2xhc3NMaXN0LmFkZChcInRhYmxlLXJlc3BvbnNpdmVcIik7XG4gICAgICAgICR0YWJsZVZpcnR1YWwuYXBwZW5kQ2hpbGQoJGNsb25lKTtcblxuICAgICAgICAkZS5yZXBsYWNlV2l0aCgkdGFibGVWaXJ0dWFsKTtcbiAgICB9KTtcblxuICAgIC8vSGlnaGxpZ2h0IENvZGUgU25pcHBldHNcbiAgICBlYWNoTm9kZSgkcHJlLCAkZSA9PiB7XG4gICAgICAgIF93aW5kb3cuaGxqcy5oaWdobGlnaHRCbG9jaygkZSk7XG4gICAgfSk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBpbml0QXJ0aWNsZTtcbiIsIlwidXNlIHN0cmljdFwiO1xuXG5pbXBvcnQgaW5pdENvb2tpZVBvbGljeSBmcm9tIFwiLi9pbml0L2luaXRDb29raWVQb2xpY3lcIjtcbmltcG9ydCBpbml0TmF2IGZyb20gXCIuL2luaXQvaW5pdE5hdlwiO1xuaW1wb3J0IGluaXRBcnRpY2xlIGZyb20gXCIuL2luaXQvaW5pdEFydGljbGVcIjtcblxuXG4vKipcbiAqIEluaXRzIHRoZSBwYWdlIHdpdGggb3B0aW9uYWwgcGFnZS1kZXBlbmRlbnQgZnVuY3Rpb25cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gcGFnZVR5cGUgbmFtZSBvZiB0aGUgZ3JhdiB0ZW1wbGF0ZVxuICovXG5jb25zdCBpbml0ID0gZnVuY3Rpb24gKHBhZ2VUeXBlKSB7XG4gICAgaW5pdENvb2tpZVBvbGljeSgpO1xuICAgIGluaXROYXYoKTtcblxuICAgIGlmIChwYWdlVHlwZSA9PT0gXCJpdGVtXCIpIHtcbiAgICAgICAgaW5pdEFydGljbGUoKTtcbiAgICB9XG59O1xuXG5jb25zdCBhcHAgPSB7XG4gICAgaW5pdFxufTtcblxuZXhwb3J0IGRlZmF1bHQgYXBwO1xuIl0sIm5hbWVzIjpbIl93aW5kb3ciLCJ3aW5kb3ciLCJfZG9jdW1lbnQiLCJkb2N1bWVudCIsIiQiLCJxdWVyeSIsIm11bHRpIiwicXVlcnlTZWxlY3RvckFsbCIsInF1ZXJ5U2VsZWN0b3IiLCJpbml0Q29va2llUG9saWN5IiwiY29va2llIiwiaW5kZXhPZiIsIiRjb29raWVub3RpY2UiLCIkY29va2llbm90aWNlQWNjZXB0Iiwic3R5bGUiLCJkaXNwbGF5IiwiY29va2llU3RyaW5nIiwiYWRkRXZlbnRMaXN0ZW5lciIsImluaXROYXYiLCIkdG9nZ2xlIiwiJG5hdiIsImlzTmF2T3BlbiIsImNsYXNzTGlzdCIsInRvZ2dsZSIsInNldEF0dHJpYnV0ZSIsImVhY2hOb2RlIiwibm9kZUxpc3QiLCJmbiIsImZyb20iLCJmb3JFYWNoIiwiaW5pdEFydGljbGUiLCIkcHJlIiwiJHRhYmxlcyIsIiRjbG9uZSIsIiRlIiwiY2xvbmVOb2RlIiwiJHRhYmxlVmlydHVhbCIsImNyZWF0ZUVsZW1lbnQiLCJhZGQiLCJhcHBlbmRDaGlsZCIsInJlcGxhY2VXaXRoIiwiaGxqcyIsImhpZ2hsaWdodEJsb2NrIiwicGFnZVR5cGUiXSwibWFwcGluZ3MiOiJvQ0FFQSxJQUFNQSxHQUFVQyxPQUNWQyxFQUFZQyxTQ1NaQyxFQUFJLFNBQVVDLEVBQU9DLFNBQ2hCQSxHQUFRSixFQUFVSyxpQkFBaUJGLEdBQVNILEVBQVVNLGNBQWNILElDSHpFSSxFQUFtQixlQUcyQixJQUE1Q1AsRUFBVVEsT0FBT0MsUUFGQSxnQkFFOEIsSUFDekNDLEdBQWdCUixFQUFFLGlCQUNsQlMsRUFBc0JULEVBQUUseUJBRWhCVSxNQUFNQyxRQUFVLFVBQ3BCTCxPQUFTTSx1REFFQ0MsaUJBQWlCLFFBQVMsYUFDNUJILE1BQU1DLFFBQVUsU0FDL0IsS0NoQkxHLEVBQVUsY0FDTkMsR0FBVWYsRUFBRSxpQkFDWmdCLEVBQU9oQixFQUFFLGVBQ1hpQixHQUFZLElBR1JKLGlCQUFpQixRQUFTLGNBQ2pCSSxJQUVMQyxVQUFVQyxPQUFPLGVBQ3BCRCxVQUFVQyxPQUFPLFVBR2RDLGFBQWEsZ0JBQWlCSCxLQUNqQ0csYUFBYSxlQUFnQkgsS0FDbkMsSUNiREksRUFBVyxTQUFVQyxFQUFVQyxTQUMzQkMsS0FBS0YsR0FBVUcsUUFBUUYsSUNHM0JHLEVBQWMsY0FDVkMsR0FBTzNCLEVBQUUsZUFBZSxHQUN4QjRCLEVBQVU1QixFQUFFLGlCQUFpQixLQUcxQjRCLEVBQVMsZUFDUkMsR0FBU0MsRUFBR0MsV0FBVSxHQUN0QkMsRUFBZ0JsQyxFQUFVbUMsY0FBYyxTQUV2Q2YsVUFBVWdCLElBQUksUUFBUyxpQkFBa0IsaUJBQ2xDaEIsVUFBVWdCLElBQUksc0JBQ2RDLFlBQVlOLEtBRXZCTyxZQUFZSixPQUlWTCxFQUFNLGNBQ0hVLEtBQUtDLGVBQWVSLGtCQ2xCdkIsU0FBVVMsV0FJRixTQUFiQSJ9"}